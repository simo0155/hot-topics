let dd = document.querySelector('.dynamic-data');
let art = dd.firstElementChild;
let pf = dd.lastElementChild;

let url = 'storage/articles.xml';

let links = document.querySelectorAll('nav');

// CREATE THE FUNCTION THAT WILL LOAD THE REQUESTED PARTIAL

/*
IMPORTANT NOTES:
loadContent RUNS EVERY TIME A LINK IS CLICKED.
loadContent REQUIRES THE INPUT. THIS INPUT IS
THE VALUE OF href ATTRIBUTE OF THE CLICKED LINK.
EVERY TIME A LINK IS CLICKED, urlFeed WILL GET 
THE UPDATED PATH TO THE REQUESTED CONTENT.
*/
// RUN THE fetch(urlFeed).then().then().catch()
// CLOSE YOUR FUNCTION loadContent HERE


// CALL loadContent WITH THE CURRENT VALUE OF url 

const loadContent = function (urlFeed) {

    fetch(urlFeed)
        .then(function (rsp) {
            if (rsp.ok) {
                return rsp.text();
            }

            throw new Error(rsp.statusText);
        })
        .then(function (xmlString) {
            // console.log(xmlString);

            // parser is the object that is generated by DOMParser
            // in order to convert the xml-string to xml-dom (object)
            let contentType = 'text/xml';

            let parser = new DOMParser();
            let xmlDOM = parser.parseFromString(xmlString, contentType);



            let articles = xmlDOM.getElementsByTagName('article');
            let cards = xmlDOM.getElementsByTagName('card');


            while (art.firstChild) {
                art.removeChild(art.firstChild);
            }

            while (pf.firstChild) {
                pf.removeChild(pf.firstChild);
            }

            // For Article Data Parsing 
            for (article of articles) {

                let info = article.children;
                let div = document.createElement('div');
                div.className = "art-card";
                art.appendChild(div);
                let fig = document.createElement('figure');
                let desc = document.createElement('figcaption');
                let img = document.createElement('img');
                fig.appendChild(img);
  
  
                for (tag of info) {
                    if (tag.tagName == "title") {
                        let title = document.createElement('h3');
                        title.innerText = tag.textContent;
                        div.appendChild(title);
                    }
                    if (tag.tagName == "img") {
                        div.appendChild(fig);
                        img.src = tag.textContent;
                    }

                    if (tag.tagName == "alt") {
                        img.alt = tag.textContent;
                    }
                    if (tag.tagName == "desc") {
                        desc.innerText = tag.textContent;
                        fig.appendChild(desc);
                    }
                    if (tag.tagName == "text") {
                        let text = document.createElement('p');
                        text.innerText = tag.textContent;
                        div.appendChild(text);
                    }
                }
            }

            // For Portfolio Data Parsing 
            for (card of cards) {
                let info = card.children;
                let div = document.createElement('div');
                div.className = "pf-card";
                pf.appendChild(div);
                for (tag of info) {
                    if (tag.tagName == "title") {
                        let title = document.createElement('h3');
                        title.innerText = tag.textContent;
                        div.appendChild(title);
                    }
                    if (tag.tagName == "img") {
                        let img = document.createElement('img');
                        img.src = tag.textContent;
                        div.appendChild(img);
                    }
                }
            }
        })

        .catch(function (err) {
            console.log(err.message);
        });

}

loadContent(url);




// CREATE THE FUNCTION THAT WILL SELECT A PARTIAL:
// const selectContent ...
// PREVENT DEFAULT BEHAVIOUR OF A LINK TAG
// GET THE VALUE OF href ATTRIBUTE OF THE CLICKED LINK
// CALL THE FUNCTION loadContent PROVIDING THE href
// VALUE OF THE CLICKED LINK AS THE VALUE FOR THE PARAMETER
// OF loadContent FUNCTION.
// CLOSE YOUR FUNCTION selectContent HERE


const selectContent = function (ev) {

    // Setting Event Target & preventing default.
    ev.preventDefault();
    let target = ev.target;

    href = target.href;

    loadContent(href);

}







// REGISTER links FOR CLICK EVENT WITH selectContent AS EVENT HANDLER!

for (let k of links) {
    k.addEventListener('click', selectContent, false);
}